package main

import (
	"fmt"
)

func main() {
	var s = []string{"1", "2", "3"}
	modifySlice(s)
	fmt.Println(s)
}

func modifySlice(i []string) {
	i[0] = "3"
	i = append(i, "4")
	i[1] = "5"
	i = append(i, "6")
}

/*

Слайс состоит из 3 полей: указатель на массив, длина и емкость

При передаче в функцию мы копируем эту структуру, но оба слайса (в main и в modifySlice) указывают на один и тот же массив в памяти

Когда мы передаем слайс в качестве параметра в функцию, то внутри уже функции, мы работаем с копией этого слайса
В 14 строке мы обращаемся к 0 индексу и присваиваем ему значение "3", это изменит оригинальный слайс, т.к. в случае обращения к элементу среза по индексу,
мы обращаемся напрямую к области в памяти.
Но после того, как мы вставили в 15 строке новое значение в конец слайса при помощи append, произошла релокация слайса (емкость была = 3, места не хватало и создался новый массив, куда перекопировались все элементы)
и теперь уже при обращении по индексу в 16 строке, мы обращаемся к новой области в памяти (после релокации), соответственно, мы уже не изменяем оригинальный слайс, а меняем его копию,
а когда уже дошли до 17 строки, то после вызова append релокации не будет, т.к. при первой вставки емкость слайса увеличилась вдвое (с 3 до 6)

Программа выведет: {"3", "2", "3"}

*/
