package main

import "fmt"

func test() (x int) {
	defer func() {
		x++
	}()
	x = 1
	return
}

func anotherTest() int {
	var x int
	defer func() {
		x++
	}()
	x = 1
	return x
}

func main() {
	fmt.Println(test())
	fmt.Println(anotherTest())
}

/*

В функции test() используется именованный возвращаемый параметр.
При выполнении return происходит следующее:
	присваивается значение возвращаемым параметрам (x = 1)
	выполняются defer
Т.к. x это та же переменная, что и будет возвращена, defer изменяет ее прямо перед возвратом. Было 1, а после x++ x = 2

В функции anotherTest() нет именованного возвращаемого параметра
Тут при выполнении return происходит следующее:
	берется текущее значение x (x=1) и копируется в анонимный результат функции
	выполняется defer, который меняет локальную переменную x, а не копию, которая уже готова для возврата
Копия, которая была готова к возврату, остается равной 1

Выводы:
2
1

*/
